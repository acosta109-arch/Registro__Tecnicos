@page "/Tecnico/Delete"
@page "/Tecnico/Delete/{tecnicosId:int}"

@inject TecnicoService tecnicoService
@inject TiposTecnicoService tiposTecnicoService
@inject NavigationManager navigation
@rendermode InteractiveServer

<PageTitle>Eliminar t&eacute;cnicos</PageTitle>
<EditForm Model="tecnico" OnValidSubmit="EliminarTecnico">
    <DataAnnotationsValidator />
    <Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />
    <div class="container">
        <div class="card shadow-lg">
            @*Header*@
            <div class="card-header bg-primary text-white">
                <h3><strong>Eliminar t&eacute;cnico</strong></h3>
            </div>
            @*Body*@
            <div class="card-body">
                <h5><strong>¿Est&aacute;s seguro de que quieres eliminar este t&eacute;cnico?</strong></h5>
                @if (tecnico != null)
                {
                    @*Datos*@
                    <div class="mb-1">
                        <p class="mb-0">T&eacute;cnicoId: @tecnico.TecnicoId</p>
                    </div>
                    <div class="mb-1">
                        <p class="mb-0">Nombres: @tecnico.Nombres</p>
                    </div>
                    <div class="mb-1">
                        <p class="mb-0">Sueldo por hora: @tecnico.SueldoHora</p>
                    </div>
                    <div class="mb-1">
                        <p class="mb-0">Tipo de t&eacute;cnico: @(ListaTipos.FirstOrDefault(t => t.TipoId == tecnico.TipoId)?.Descripcion ?? "No encontrado")</p>
                    </div>
                }
                else
                {
                    <p>No se encontr&oacute; ning&uacute;n t&eacute;cnico con el ID especificado.</p>
                }
            </div>
            @*Footer*@
            <div class="card-footer">
                <button type="button" class="btn btn-dark bi bi-arrow-left" @onclick="Volver">  Volver</button>
                <button type="submit" class="btn btn-danger bi bi-trash-fill">  Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int tecnicosId { get; set; }
    public Tecnicos tecnico { get; set; } = new Tecnicos();
    public List<TiposTecnicos> ListaTipos { get; set; } = new List<TiposTecnicos>();
    List<ToastMessage> MensajeToast = new List<ToastMessage>();


    protected override async Task OnInitializedAsync()
    {
        ListaTipos = await tiposTecnicoService.Listar(t => true);

        if (tecnicosId > 0)
        {
            tecnico = await tecnicoService.Buscar(tecnicosId);
        }
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
        };

    private void Mensaje(ToastType toastType, string mensaje)
    {
        MensajeToast.Add(CreateToastMessage(toastType, mensaje));
    }

    public async Task EliminarTecnico()
    {
        var eliminar = await tecnicoService.Eliminar(tecnico.TecnicoId);
        if (eliminar)
        {
            Mensaje(ToastType.Success, "El técnico se ha eliminado correctamente.");
            Volver();
        }
        else
        {
            Mensaje(ToastType.Success, "El técnico no se ha podido eliminar.");
        }
    }

    public void Volver()
    {
        navigation.NavigateTo("/Tecnico/Index");
    }
}
